use sqlx::PgPool;
use {{crate_name}}_web::test_utils::TestApp;
use crate::test_utils::*;

#[cfg(test)]
mod api_endpoint_tests {
    use super::*;

    #[sqlx::test]
    async fn test_create_user_endpoint(pool: PgPool) {
        let test_app = TestApp::new().await;
        let client = ApiTestClient::new(test_app.app);
        
        let user_request = TestDataFactory::create_user();
        
        let response = client.post("/api/users", &user_request).await;
        
        response.assert_status(201);
        let created_user: User = response.assert_json_success();
        
        assert_eq!(created_user.username, user_request.username);
        assert_eq!(created_user.email, user_request.email);
        assert_eq!(created_user.first_name, user_request.first_name);
        assert_eq!(created_user.last_name, user_request.last_name);
        
        test_app.cleanup().await;
    }

    #[sqlx::test]
    async fn test_get_user_endpoint(pool: PgPool) {
        let test_app = TestApp::new().await;
        let client = ApiTestClient::new(test_app.app);
        
        // Seed test data
        let seed_data = DatabaseTestUtils::seed_test_data(&test_app.db_pool).await;
        let test_user = &seed_data.users[0];
        
        let response = client.get(&format!("/api/users/{}", test_user.id)).await;
        
        response.assert_status(200);
        let fetched_user: User = response.assert_json_success();
        
        assert_eq!(fetched_user.id, test_user.id);
        assert_eq!(fetched_user.username, test_user.username);
        assert_eq!(fetched_user.email, test_user.email);
        
        test_app.cleanup().await;
    }

    #[sqlx::test]
    async fn test_get_nonexistent_user(pool: PgPool) {
        let test_app = TestApp::new().await;
        let client = ApiTestClient::new(test_app.app);
        
        use uuid::Uuid;
        let nonexistent_id = Uuid::new_v4();
        
        let response = client.get(&format!("/api/users/{}", nonexistent_id)).await;
        
        response.assert_status(404);
        let error_message = response.assert_json_error();
        error_message.assert_contains("not found");
        
        test_app.cleanup().await;
    }

    #[sqlx::test]
    async fn test_update_user_endpoint(pool: PgPool) {
        let test_app = TestApp::new().await;
        let client = ApiTestClient::new(test_app.app);
        
        // Seed test data
        let seed_data = DatabaseTestUtils::seed_test_data(&test_app.db_pool).await;
        let test_user = &seed_data.users[0];
        
        let update_request = UpdateUserRequest {
            first_name: Some("Updated".to_string()),
            last_name: Some("Name".to_string()),
            email: None,
        };
        
        let response = client.put(&format!("/api/users/{}", test_user.id), &update_request).await;
        
        response.assert_status(200);
        let updated_user: User = response.assert_json_success();
        
        assert_eq!(updated_user.first_name, "Updated");
        assert_eq!(updated_user.last_name, "Name");
        assert_eq!(updated_user.email, test_user.email); // Should remain unchanged
        
        test_app.cleanup().await;
    }

    #[sqlx::test]
    async fn test_delete_user_endpoint(pool: PgPool) {
        let test_app = TestApp::new().await;
        let client = ApiTestClient::new(test_app.app);
        
        // Seed test data
        let seed_data = DatabaseTestUtils::seed_test_data(&test_app.db_pool).await;
        let test_user = &seed_data.users[0];
        
        let response = client.delete(&format!("/api/users/{}", test_user.id)).await;
        
        response.assert_status(204);
        
        // Verify user is deleted
        let get_response = client.get(&format!("/api/users/{}", test_user.id)).await;
        get_response.assert_status(404);
        
        test_app.cleanup().await;
    }

    #[sqlx::test]
    async fn test_list_users_endpoint(pool: PgPool) {
        let test_app = TestApp::new().await;
        let client = ApiTestClient::new(test_app.app);
        
        // Seed test data
        let seed_data = DatabaseTestUtils::seed_test_data(&test_app.db_pool).await;
        
        let response = client.get("/api/users").await;
        
        response.assert_status(200);
        let users: Vec<User> = response.assert_json_success();
        
        assert_eq!(users.len(), seed_data.users.len());
        
        // Verify users are returned in some order
        for seed_user in &seed_data.users {
            assert!(users.iter().any(|u| u.id == seed_user.id));
        }
        
        test_app.cleanup().await;
    }
}

#[cfg(test)]
mod validation_tests {
    use super::*;

    #[sqlx::test]
    async fn test_create_user_with_invalid_email(pool: PgPool) {
        let test_app = TestApp::new().await;
        let client = ApiTestClient::new(test_app.app);
        
        let mut user_request = TestDataFactory::create_user();
        user_request.email = "invalid-email".to_string();
        
        let response = client.post("/api/users", &user_request).await;
        
        response.assert_status(400);
        let error_message = response.assert_json_error();
        error_message.assert_contains("email");
        
        test_app.cleanup().await;
    }

    #[sqlx::test]
    async fn test_create_user_with_empty_username(pool: PgPool) {
        let test_app = TestApp::new().await;
        let client = ApiTestClient::new(test_app.app);
        
        let mut user_request = TestDataFactory::create_user();
        user_request.username = "".to_string();
        
        let response = client.post("/api/users", &user_request).await;
        
        response.assert_status(400);
        let error_message = response.assert_json_error();
        error_message.assert_contains("username");
        
        test_app.cleanup().await;
    }

    #[sqlx::test]
    async fn test_create_user_with_duplicate_email(pool: PgPool) {
        let test_app = TestApp::new().await;
        let client = ApiTestClient::new(test_app.app);
        
        let user_request = TestDataFactory::create_user();
        
        // Create first user
        let response1 = client.post("/api/users", &user_request).await;
        response1.assert_status(201);
        
        // Try to create another user with same email
        let response2 = client.post("/api/users", &user_request).await;
        response2.assert_status(409);
        
        let error_message = response2.assert_json_error();
        error_message.assert_contains("email");
        
        test_app.cleanup().await;
    }
}

#[cfg(test)]
mod pagination_tests {
    use super::*;

    #[sqlx::test]
    async fn test_list_users_with_pagination(pool: PgPool) {
        let test_app = TestApp::new().await;
        let client = ApiTestClient::new(test_app.app);
        
        // Seed more test data for pagination
        let seed_data = DatabaseTestUtils::seed_test_data(&test_app.db_pool).await;
        
        // Test first page
        let response = client.get("/api/users?page=1&per_page=2").await;
        response.assert_status(200);
        
        let page_result: PaginatedResponse<User> = response.assert_json_success();
        assert_eq!(page_result.data.len(), 2);
        assert_eq!(page_result.page, 1);
        assert_eq!(page_result.per_page, 2);
        assert!(page_result.total >= seed_data.users.len());
        
        // Test second page
        let response = client.get("/api/users?page=2&per_page=2").await;
        response.assert_status(200);
        
        let page_result: PaginatedResponse<User> = response.assert_json_success();
        assert!(page_result.data.len() <= 2);
        assert_eq!(page_result.page, 2);
        
        test_app.cleanup().await;
    }

    #[sqlx::test]
    async fn test_list_users_with_invalid_pagination(pool: PgPool) {
        let test_app = TestApp::new().await;
        let client = ApiTestClient::new(test_app.app);
        
        // Test invalid page number
        let response = client.get("/api/users?page=0").await;
        response.assert_status(400);
        
        // Test invalid per_page
        let response = client.get("/api/users?per_page=0").await;
        response.assert_status(400);
        
        // Test excessive per_page
        let response = client.get("/api/users?per_page=1000").await;
        response.assert_status(400);
        
        test_app.cleanup().await;
    }
}

#[cfg(test)]
mod search_and_filter_tests {
    use super::*;

    #[sqlx::test]
    async fn test_search_users_by_username(pool: PgPool) {
        let test_app = TestApp::new().await;
        let client = ApiTestClient::new(test_app.app);
        
        // Create user with specific username
        let user_request = TestDataFactory::create_user_with_email("searchtest@example.com");
        let created_response = client.post("/api/users", &user_request).await;
        let created_user: User = created_response.assert_json_success();
        
        // Search for the user
        let search_query = &created_user.username[0..3]; // First 3 characters
        let response = client.get(&format!("/api/users?search={}", search_query)).await;
        
        response.assert_status(200);
        let users: Vec<User> = response.assert_json_success();
        
        assert!(users.iter().any(|u| u.id == created_user.id));
        
        test_app.cleanup().await;
    }

    #[sqlx::test]
    async fn test_filter_users_by_creation_date(pool: PgPool) {
        let test_app = TestApp::new().await;
        let client = ApiTestClient::new(test_app.app);
        
        let seed_data = DatabaseTestUtils::seed_test_data(&test_app.db_pool).await;
        
        let today = chrono::Utc::now().date_naive();
        let response = client.get(&format!("/api/users?created_after={}", today)).await;
        
        response.assert_status(200);
        let users: Vec<User> = response.assert_json_success();
        
        // All seed data should be created today
        assert_eq!(users.len(), seed_data.users.len());
        
        test_app.cleanup().await;
    }
}