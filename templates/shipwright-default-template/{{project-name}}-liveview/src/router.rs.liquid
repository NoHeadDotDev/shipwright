{%- if use_liveview %}
//! LiveView routing and configuration
//!
//! This module provides routing functionality for LiveView components,
//! handling WebSocket connections, and serving static assets.

{%- if framework == "axum" %}
use axum::{
    Router,
    routing::get,
    response::IntoResponse,
    extract::{ws::WebSocketUpgrade, State},
};
{%- elif framework == "actix-web" %}
use actix_web::{web, HttpRequest, HttpResponse, Result};
use actix_web_actors::ws;
{%- elif framework == "rocket" %}
use rocket::{Route, routes, get, State};
{%- endif %}

use crate::{LiveViewConfig, pages, components};

/// LiveView router that handles all LiveView-related routes
pub struct LiveViewRouter {
    config: LiveViewConfig,
}

impl LiveViewRouter {
    /// Create a new LiveView router with the given configuration
    pub fn new(config: LiveViewConfig) -> Self {
        Self { config }
    }

    {%- if framework == "axum" %}
    /// Build the Axum router with all LiveView routes
    pub fn build_router(self) -> Router {
        Router::new()
            .route("/", get(pages::home::home_page))
            .route("/counter", get(pages::counter::counter_page))
            .route("/chat", get(pages::chat::chat_page))
            .route("/components/demo", get(pages::components::components_demo))
            .route("/websocket", get(websocket_handler))
            .with_state(self.config)
    }
    {%- elif framework == "actix-web" %}
    /// Configure Actix Web routes for LiveView
    pub fn configure(config: &mut web::ServiceConfig) {
        config
            .route("/", web::get().to(pages::home::home_page))
            .route("/counter", web::get().to(pages::counter::counter_page))
            .route("/chat", web::get().to(pages::chat::chat_page))
            .route("/components/demo", web::get().to(pages::components::components_demo))
            .route("/websocket", web::get().to(websocket_handler));
    }
    {%- elif framework == "rocket" %}
    /// Get Rocket routes for LiveView
    pub fn routes() -> Vec<Route> {
        routes![
            pages::home::home_page,
            pages::counter::counter_page,
            pages::chat::chat_page,
            pages::components::components_demo,
            websocket_handler
        ]
    }
    {%- endif %}
}

{%- if framework == "axum" %}
/// Handle WebSocket connections for LiveView
async fn websocket_handler(
    ws: WebSocketUpgrade,
    State(config): State<LiveViewConfig>,
) -> impl IntoResponse {
    ws.on_upgrade(|socket| async move {
        // Handle WebSocket connection for LiveView
        // This would integrate with shipwright-liveview's WebSocket handling
        tokio::time::sleep(tokio::time::Duration::from_secs(1)).await;
    })
}
{%- elif framework == "actix-web" %}
/// Handle WebSocket connections for LiveView
async fn websocket_handler(req: HttpRequest, stream: web::Payload) -> Result<HttpResponse> {
    // This would integrate with shipwright-liveview's WebSocket handling
    Ok(HttpResponse::Ok().finish())
}
{%- elif framework == "rocket" %}
/// Handle WebSocket connections for LiveView
#[get("/websocket")]
fn websocket_handler() -> &'static str {
    // Rocket WebSocket handling would be implemented here
    "WebSocket endpoint"
}
{%- endif %}
{%- endif %}